'number' + 3 + 3; //= number33. js приводит 3 к string(конкатенация) и в итоге получаем "number33"

null + 3; // = 3. js приводит null к 0(number) и в итоге получаем 3(как number)

5 && "qwerty" //= qwerty. В операторе && если ни одно из значений не равно false то выводится последнее значение, в данном случае qwerty как строка

+'40' + +'2' + "hillel"; //= 42hillel. Так как перед строками "40" и "2" стоит унарный плюс - эти строки превращаются в number. Если сложить number и строку то получается строка(конкатенация)

'10' - 5 === 6; //= false. Строка 10 приводится к типу number, и в результате вычисления получается 5, что не равно 6.

true + false //= 1. JS приводит булевые значения при сложении к числу, соответственно 1+0=1.

'4px' - 3 //= NaN. Данную строку нельзя привести к числу, соответственно при вычитании из такой строки числа мы получаем NaN

'4' - 3 //= 1. При вычитании строки и числа строка переводится к числу. Данную строку можно привести к числу 4, соответственно 4-3=1

'6' + 3 ** 0; //= 61. 3 в нулевой степени равно единице. при сложении строки и числа - число переводится в строку, соответственну в результате имеем string "61"

12 / '6' //= 2. Строка приводится к числу

'10' + (5 === 6); //= 10false. При сравнении получаем false, при сложении происходит конкатенация и в результате имеем string "10false"

null == '' //= false. null не равен пустой строке, null мог бы быть равен undefined

3 ** (9 / 3); //= 27. При делении получаем 3, 3 в 3 степени будет 27.

!!'false' == !!'true' //= true. Любая непустая строка это true, при двух отрицаниях каждое из двух сравниваемых значений будет true

0 || '0' && 1 //= 1. В операторе && оба значения не false, соответственно результат последнее значение - 1. В операторе || из 0 и 1 берётся первое истинное значение, то есть 1

(+null == false) < 1; //= false. +null приводится к числу 0. 0==false (false в числовом контексте это 0) даёт нам True, что равно логической единице, что в свою очередь равно, а не меньше единицы.

false && true || true //= true. false && true дают false, но при этом false || true даёт true.

false && (false || true); //= false. первым выполняется действие в скобках, результатом будет true, при false && true результат будет false.

(+null == false) < 1 ** 5; //= false. +null приводится к 0(что равно false), значит слева будет true, что равно 1. 1**5 будет 1, что не меньше, чем 1.